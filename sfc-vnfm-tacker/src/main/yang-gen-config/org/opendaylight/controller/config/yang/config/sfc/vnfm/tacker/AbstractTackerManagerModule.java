/*
* Generated file
*
* Generated from: yang module name: sfc-vnfm-tacker yang module local name: sfc-vnf-tacker-provider
* Generated by: org.opendaylight.controller.config.yangjmxgenerator.plugin.JMXGenerator
* Generated at: Sat Dec 17 19:23:16 CST 2016
*
* Do not modify this file unless it is present under src/main directory
*/
package org.opendaylight.controller.config.yang.config.sfc.vnfm.tacker;
@org.opendaylight.yangtools.yang.binding.annotations.ModuleQName(namespace = "urn:opendaylight:params:xml:ns:yang:controller:config:sfc:vnfm:tacker", name = "sfc-vnfm-tacker", revision = "2015-12-23")

public abstract class AbstractTackerManagerModule extends org.opendaylight.controller.config.spi.AbstractModule<AbstractTackerManagerModule> implements org.opendaylight.controller.config.yang.config.sfc.vnfm.tacker.TackerManagerModuleMXBean,org.opendaylight.controller.config.yang.config.sfc.vnfm.spi.SfcVnfManagerServiceInterface {
    private static final org.slf4j.Logger LOGGER = org.slf4j.LoggerFactory.getLogger(org.opendaylight.controller.config.yang.config.sfc.vnfm.tacker.AbstractTackerManagerModule.class);

    //attributes start

    public static final org.opendaylight.controller.config.api.JmxAttribute sfcVnfmTackerTenantJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SfcVnfmTackerTenant");
    private java.lang.String sfcVnfmTackerTenant;

    public static final org.opendaylight.controller.config.api.JmxAttribute sfcVnfmTackerNameJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SfcVnfmTackerName");
    private java.lang.String sfcVnfmTackerName;

    public static final org.opendaylight.controller.config.api.JmxAttribute sfcVnfmTackerPortJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SfcVnfmTackerPort");
    private java.lang.Integer sfcVnfmTackerPort;

    public static final org.opendaylight.controller.config.api.JmxAttribute sfcVnfmUriJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SfcVnfmUri");
    private java.lang.String sfcVnfmUri;

    public static final org.opendaylight.controller.config.api.JmxAttribute sfcVnfmKeystonePortJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SfcVnfmKeystonePort");
    private java.lang.Integer sfcVnfmKeystonePort;

    public static final org.opendaylight.controller.config.api.JmxAttribute sfcVnfmTackerPasswordJmxAttribute = new org.opendaylight.controller.config.api.JmxAttribute("SfcVnfmTackerPassword");
    private java.lang.String sfcVnfmTackerPassword;

    //attributes end

    public AbstractTackerManagerModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver) {
        super(identifier, dependencyResolver);
    }

    public AbstractTackerManagerModule(org.opendaylight.controller.config.api.ModuleIdentifier identifier,org.opendaylight.controller.config.api.DependencyResolver dependencyResolver,AbstractTackerManagerModule oldModule,java.lang.AutoCloseable oldInstance) {
        super(identifier, dependencyResolver, oldModule, oldInstance);
    }

    @Override
    public void validate() {

        customValidation();
    }

    protected void customValidation() {
    }

    protected final void resolveDependencies() {
    }

    public boolean canReuseInstance(AbstractTackerManagerModule oldModule){
        // allow reusing of old instance if no parameters was changed
        return isSame(oldModule);
    }

    public java.lang.AutoCloseable reuseInstance(java.lang.AutoCloseable oldInstance){
        // implement if instance reuse should be supported. Override canReuseInstance to change the criteria.
        return oldInstance;
    }

    public boolean isSame(AbstractTackerManagerModule other) {
        if (other == null) {
            throw new IllegalArgumentException("Parameter 'other' is null");
        }
        if (!java.util.Objects.deepEquals(sfcVnfmTackerTenant, other.sfcVnfmTackerTenant)) {
            return false;
        }
        if (!java.util.Objects.deepEquals(sfcVnfmTackerName, other.sfcVnfmTackerName)) {
            return false;
        }
        if (!java.util.Objects.deepEquals(sfcVnfmTackerPort, other.sfcVnfmTackerPort)) {
            return false;
        }
        if (!java.util.Objects.deepEquals(sfcVnfmUri, other.sfcVnfmUri)) {
            return false;
        }
        if (!java.util.Objects.deepEquals(sfcVnfmKeystonePort, other.sfcVnfmKeystonePort)) {
            return false;
        }
        if (!java.util.Objects.deepEquals(sfcVnfmTackerPassword, other.sfcVnfmTackerPassword)) {
            return false;
        }

        return true;
    }

    @Override
    public boolean equals(Object o) {
    if (this == o) { return true; }
    if (o == null || getClass() != o.getClass()) { return false; }
        AbstractTackerManagerModule that = (AbstractTackerManagerModule) o;
        return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
        return identifier.hashCode();
    }

    // getters and setters
    @Override
    public java.lang.String getSfcVnfmTackerTenant() {
        return sfcVnfmTackerTenant;
    }

    /**
    * This is the tenant name used for tacker.
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "This is the tenant name used for tacker.")
    public void setSfcVnfmTackerTenant(java.lang.String sfcVnfmTackerTenant) {
        this.sfcVnfmTackerTenant = sfcVnfmTackerTenant;
    }

    @Override
    public java.lang.String getSfcVnfmTackerName() {
        return sfcVnfmTackerName;
    }

    /**
    * This is the username used for authentication with tacker service.
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "This is the username used for authentication with tacker service.")
    public void setSfcVnfmTackerName(java.lang.String sfcVnfmTackerName) {
        this.sfcVnfmTackerName = sfcVnfmTackerName;
    }

    @Override
    public java.lang.Integer getSfcVnfmTackerPort() {
        return sfcVnfmTackerPort;
    }

    /**
    * This is the port that Tacker uses for communication.
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "This is the port that Tacker uses for communication.")
    public void setSfcVnfmTackerPort(java.lang.Integer sfcVnfmTackerPort) {
        this.sfcVnfmTackerPort = sfcVnfmTackerPort;
    }

    @Override
    public java.lang.String getSfcVnfmUri() {
        return sfcVnfmUri;
    }

    /**
    * This is the URI used for communication with services.
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "This is the URI used for communication with services.")
    public void setSfcVnfmUri(java.lang.String sfcVnfmUri) {
        this.sfcVnfmUri = sfcVnfmUri;
    }

    @Override
    public java.lang.Integer getSfcVnfmKeystonePort() {
        return sfcVnfmKeystonePort;
    }

    /**
    * This is the port that Keystone uses for communication.
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "This is the port that Keystone uses for communication.")
    public void setSfcVnfmKeystonePort(java.lang.Integer sfcVnfmKeystonePort) {
        this.sfcVnfmKeystonePort = sfcVnfmKeystonePort;
    }

    @Override
    public java.lang.String getSfcVnfmTackerPassword() {
        return sfcVnfmTackerPassword;
    }

    /**
    * This is the password used for authentication with tacker service.
    */
    @Override
    @org.opendaylight.controller.config.api.annotations.Description(value = "This is the password used for authentication with tacker service.")
    public void setSfcVnfmTackerPassword(java.lang.String sfcVnfmTackerPassword) {
        this.sfcVnfmTackerPassword = sfcVnfmTackerPassword;
    }

    public org.slf4j.Logger getLogger() {
        return LOGGER;
    }

}
